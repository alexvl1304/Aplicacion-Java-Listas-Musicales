/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import listasmusicales.ModeloListaCancion;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.JTableHeader;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import listasmusicales.Cancion;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/**
 *
 * @author Tarde
 */
public class Aplicacion extends javax.swing.JFrame {

	private ModeloListaCancion modeloCancion;

	public Aplicacion() {
		initComponents();
		JTableHeader header = jListaCanciones.getTableHeader();
		header.setFont(new Font("Segoe UI", Font.PLAIN, 14));
		ImageIcon icon = (new ImageIcon(getClass().getResource("/resources/icon.png")));
		this.setIconImage(icon.getImage());
		this.modeloCancion = new ModeloListaCancion();
		this.jListaCanciones.setModel(this.modeloCancion);
		this.jListaCanciones.getColumnModel().getColumn(0).setResizable(false);
		this.jListaCanciones.getColumnModel().getColumn(1).setResizable(false);
		this.jListaCanciones.getColumnModel().getColumn(2).setResizable(false);
		this.jListaCanciones.getColumnModel().getColumn(0).setPreferredWidth(430);
		this.jListaCanciones.getColumnModel().getColumn(1).setPreferredWidth(80);
		this.jListaCanciones.getColumnModel().getColumn(2).setPreferredWidth(390);
		this.modeloCancion.añadirCancion(new Cancion("Cancion1", "ruta1", 60));
		this.modeloCancion.añadirCancion(new Cancion("Cancion2", "ruta2", 98));
		this.modeloCancion.añadirCancion(new Cancion("Cancion3", "ruta3", 5));
		this.modeloCancion.añadirCancion(new Cancion("Cancion4", "ruta4", 156));
		updateTableUI();
		jListaCanciones.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent event) {
				updateTime();
			}
		});
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")

   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      jScrollPane1 = new javax.swing.JScrollPane();
      jListaCanciones = new javax.swing.JTable();
      jTextOpciones = new javax.swing.JLabel();
      jButtonEliminar = new javax.swing.JButton();
      jButtonEditar = new javax.swing.JButton();
      jTextInfo = new javax.swing.JLabel();
      jButtonAñadir = new javax.swing.JButton();
      jButtonPlay = new javax.swing.JButton();
      jMusicBar = new javax.swing.JProgressBar();
      jButtonPrevious = new javax.swing.JButton();
      jButtonNext = new javax.swing.JButton();
      jTimeStart = new javax.swing.JLabel();
      jTimeEnd = new javax.swing.JLabel();
      jMenuBar = new javax.swing.JMenuBar();
      jMenu1 = new javax.swing.JMenu();
      jMenuBarNueva = new javax.swing.JMenuItem();
      jSeparator2 = new javax.swing.JPopupMenu.Separator();
      jMenuBarGuardar = new javax.swing.JMenuItem();
      jMenuBarCargar = new javax.swing.JMenuItem();

      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
      setTitle("Lista de reprodución");
      setMinimumSize(new java.awt.Dimension(800, 450));
      setPreferredSize(new java.awt.Dimension(960, 540));

      jListaCanciones.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
      jListaCanciones.setModel(new javax.swing.table.DefaultTableModel(
         new Object [][] {

         },
         new String [] {
            "Titulo", "Duración", "Ruta"
         }
      ) {
         Class[] types = new Class [] {
            java.lang.String.class, java.lang.Integer.class, java.lang.String.class
         };
         boolean[] canEdit = new boolean [] {
            false, false, false
         };

         public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
         }

         public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
         }
      });
      jListaCanciones.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
      jListaCanciones.getTableHeader().setReorderingAllowed(false);
      jListaCanciones.addFocusListener(new java.awt.event.FocusAdapter() {
         public void focusGained(java.awt.event.FocusEvent evt) {
            jListaCancionesFocusGained(evt);
         }
      });
      jListaCanciones.addMouseListener(new java.awt.event.MouseAdapter() {
         public void mouseClicked(java.awt.event.MouseEvent evt) {
            jListaCancionesMouseClicked(evt);
         }
         public void mousePressed(java.awt.event.MouseEvent evt) {
            jListaCancionesMousePressed(evt);
         }
      });
      jListaCanciones.addInputMethodListener(new java.awt.event.InputMethodListener() {
         public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            jListaCancionesCaretPositionChanged(evt);
         }
         public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
         }
      });
      jListaCanciones.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
         public void propertyChange(java.beans.PropertyChangeEvent evt) {
            jListaCancionesPropertyChange(evt);
         }
      });
      jScrollPane1.setViewportView(jListaCanciones);
      if (jListaCanciones.getColumnModel().getColumnCount() > 0) {
         jListaCanciones.getColumnModel().getColumn(0).setResizable(false);
         jListaCanciones.getColumnModel().getColumn(0).setPreferredWidth(600);
         jListaCanciones.getColumnModel().getColumn(1).setResizable(false);
         jListaCanciones.getColumnModel().getColumn(1).setPreferredWidth(120);
         jListaCanciones.getColumnModel().getColumn(2).setResizable(false);
         jListaCanciones.getColumnModel().getColumn(2).setPreferredWidth(260);
      }

      jTextOpciones.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
      jTextOpciones.setText("Opciones:");

      jButtonEliminar.setText("Eliminar canción");
      jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonEliminarActionPerformed(evt);
         }
      });

      jButtonEditar.setText("Editar canción");
      jButtonEditar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonEditarActionPerformed(evt);
         }
      });

      jTextInfo.setFont(new java.awt.Font("Segoe UI", 1, 20)); // NOI18N
      jTextInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jTextInfo.setText("PLAYLIST");

      jButtonAñadir.setText("Añadir canción");
      jButtonAñadir.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonAñadirActionPerformed(evt);
         }
      });

      jButtonPlay.setText("▶");
      jButtonPlay.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
      jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonPlayActionPerformed(evt);
         }
      });

      jButtonPrevious.setText("⏮");
      jButtonPrevious.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
      jButtonPrevious.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonPreviousActionPerformed(evt);
         }
      });

      jButtonNext.setText("⏭");
      jButtonNext.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
      jButtonNext.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButtonNextActionPerformed(evt);
         }
      });

      jTimeStart.setText("00:00");

      jTimeEnd.setText("00:00");

      jMenu1.setText("Archivo");
      jMenu1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

      jMenuBarNueva.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
      jMenuBarNueva.setText("Nueva Playlist");
      jMenuBarNueva.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuBarNuevaActionPerformed(evt);
         }
      });
      jMenu1.add(jMenuBarNueva);
      jMenu1.add(jSeparator2);

      jMenuBarGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
      jMenuBarGuardar.setText("Guardar Playlist");
      jMenuBarGuardar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuBarGuardarActionPerformed(evt);
         }
      });
      jMenu1.add(jMenuBarGuardar);

      jMenuBarCargar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_DOWN_MASK));
      jMenuBarCargar.setText("Cargar Playlist");
      jMenuBarCargar.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            jMenuBarCargarActionPerformed(evt);
         }
      });
      jMenu1.add(jMenuBarCargar);

      jMenuBar.add(jMenu1);

      setJMenuBar(jMenuBar);

      javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
      getContentPane().setLayout(layout);
      layout.setHorizontalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jScrollPane1)
                  .addContainerGap())
               .addGroup(layout.createSequentialGroup()
                  .addComponent(jTextInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jTextOpciones)
                  .addGap(18, 18, 18)
                  .addComponent(jButtonAñadir)
                  .addGap(18, 18, 18)
                  .addComponent(jButtonEliminar)
                  .addGap(18, 18, 18)
                  .addComponent(jButtonEditar)
                  .addGap(31, 31, 31))))
         .addGroup(layout.createSequentialGroup()
            .addGap(17, 17, 17)
            .addComponent(jTimeStart)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jMusicBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jTimeEnd)
            .addGap(28, 28, 28))
         .addGroup(layout.createSequentialGroup()
            .addGap(392, 392, 392)
            .addComponent(jButtonPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jButtonPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(385, Short.MAX_VALUE))
      );
      layout.setVerticalGroup(
         layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
         .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
               .addGroup(layout.createSequentialGroup()
                  .addGap(22, 22, 22)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                     .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextOpciones, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButtonAñadir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                     .addComponent(jTextInfo))
                  .addGap(18, 18, 18)
                  .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 397, Short.MAX_VALUE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                     .addComponent(jMusicBar, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                     .addComponent(jTimeEnd)))
               .addGroup(layout.createSequentialGroup()
                  .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addComponent(jTimeStart)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
               .addComponent(jButtonPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButtonPrevious, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
               .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(10, 10, 10))
      );

      pack();
   }// </editor-fold>//GEN-END:initComponents

   private void jButtonAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAñadirActionPerformed
		JDNuevoCancion dialogNuevaCancion = new JDNuevoCancion(this, true);
		dialogNuevaCancion.setVisible(true);
		if (dialogNuevaCancion.getCancionCreada()) {
			this.modeloCancion.añadirCancion(dialogNuevaCancion.GetCancion());
			updateTableUI();
		}
   }//GEN-LAST:event_jButtonAñadirActionPerformed

   private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEliminarActionPerformed
		int index = this.jListaCanciones.getSelectedRow();
		if (index != -1 && this.modeloCancion.getRowCount() > index) {
			this.modeloCancion.eliminarCancion(index);
			updateTableUI();
		} else {
			JOptionPane.showMessageDialog(this, "Ningun elemento seleccionado");
		}
   }//GEN-LAST:event_jButtonEliminarActionPerformed

   private void jButtonEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarActionPerformed
		int index = this.jListaCanciones.getSelectedRow();
		if (index != -1 && this.modeloCancion.getRowCount() > index) {
			JDNuevoCancion modificarCancion = new JDNuevoCancion(this, true, modeloCancion.getCancion(index));
			modificarCancion.setVisible(true);
			if (modificarCancion.getCancionCreada()) {
				this.modeloCancion.modificarCancion(modificarCancion.GetCancion(), index);
				updateTableUI();
			}
			updateTableUI();
		} else {
			JOptionPane.showMessageDialog(this, "Ningun elemento seleccionado");
		}
   }//GEN-LAST:event_jButtonEditarActionPerformed

   private void jMenuBarNuevaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuBarNuevaActionPerformed
		if (JOptionPane.showConfirmDialog(this, "¡La playlist actual se perderá si no está guardada!", "Confirmar", 2) == JOptionPane.OK_OPTION) {
			modeloCancion.clear();
			updateTableUI();
		}
   }//GEN-LAST:event_jMenuBarNuevaActionPerformed

   private void jMenuBarCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuBarCargarActionPerformed
		if (JOptionPane.showConfirmDialog(this, "¡La playlist actual se perderá si no está guardada!", "Confirmar", 2) == JOptionPane.OK_OPTION) {

			try {
				UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			} catch (Exception e) {
			}

			JFileChooser fileChooser = new JFileChooser();
			fileChooser.setDialogTitle("Cargar archivo");
			Action details = fileChooser.getActionMap().get("viewTypeDetails");
			if (details != null) {
				details.actionPerformed(null);
			}

			FileNameExtensionFilter filtrom3u = new FileNameExtensionFilter("Formato .M3U", "m3u");
			FileNameExtensionFilter filtropls = new FileNameExtensionFilter("Formato .PLS", "pls");
			FileNameExtensionFilter filtroXSPF = new FileNameExtensionFilter("Formato .XSPF", "xspf");
			fileChooser.addChoosableFileFilter(filtrom3u);
			fileChooser.addChoosableFileFilter(filtropls);
			fileChooser.addChoosableFileFilter(filtroXSPF);

			int seleccion = fileChooser.showOpenDialog(this);
			if (seleccion == JFileChooser.APPROVE_OPTION) {
				File archivo = fileChooser.getSelectedFile();
				String nombreArchivo = fileChooser.getSelectedFile().getName();
				String extension = getExtension(nombreArchivo);

				boolean cargadoConExito;
				switch (extension) {
					case "m3u", "pls", "xspf" ->
						modeloCancion.clear();
				}
				switch (extension) {
					case "m3u" -> {
						cargadoConExito = cargarM3U(archivo);
					}
					case "pls" -> {
						cargadoConExito = cargarPLS(archivo);
					}
					case "xspf" -> {
						cargadoConExito = cargarXSPF(archivo);
					}
					default ->
						cargadoConExito = false;
				}
				if (!cargadoConExito) {
					switch (extension) {
						case "m3u", "pls", "xspf" -> {
							modeloCancion.clear();
						}
					}
				}

				if (!cargadoConExito) {
					JOptionPane.showMessageDialog(this, "El archivo esta dañado o es invalido");
				}
			}

			setLookAndFeelNimbus();
			updateTableUI();
		}
   }//GEN-LAST:event_jMenuBarCargarActionPerformed

   private void jMenuBarGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuBarGuardarActionPerformed
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
		}

		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setDialogTitle("Guardar archivo");
		Action details = fileChooser.getActionMap().get("viewTypeDetails");
		if (details != null) {
			details.actionPerformed(null);
		}

		FileNameExtensionFilter filtrom3u = new FileNameExtensionFilter("Formato .M3U", "m3u");
		FileNameExtensionFilter filtropls = new FileNameExtensionFilter("Formato .PLS", "pls");
		FileNameExtensionFilter filtroXSPF = new FileNameExtensionFilter("Formato .XSPF", "xspf");
		fileChooser.addChoosableFileFilter(filtrom3u);
		fileChooser.addChoosableFileFilter(filtropls);
		fileChooser.addChoosableFileFilter(filtroXSPF);
		//fileChooser.setFileFilter(filtrom3u);

		int seleccion = fileChooser.showSaveDialog(this);
		if (seleccion == JFileChooser.APPROVE_OPTION) {
			File archivo = fileChooser.getSelectedFile();
			int confirm = 0;
			if (archivo.exists()) {
				confirm = JOptionPane.showConfirmDialog(this, "El archivo ya existe. ¿Quieres sobrescribirlo?", "Confirmar sobrescritura", JOptionPane.YES_NO_OPTION);
			}
			if (confirm == JOptionPane.OK_OPTION) {
				String extension = (fileChooser.getFileFilter().getDescription().equals("All Files")) ? "" : ((FileNameExtensionFilter) fileChooser.getFileFilter()).getExtensions()[0];
				boolean salvadoConExito = true;

				if (archivo.getName().contains(".") || (fileChooser.getFileFilter().getDescription().equals("All Files"))) {
					extension = getExtension(archivo.getName());
					switch (extension) {
						case "m3u", "pls", "xspf" -> {
							salvadoConExito = true;
						}
						default -> {
							salvadoConExito = false;
						}
					}
				} else {
					archivo = new File(archivo.getAbsolutePath() + "." + extension);
				}

				if (salvadoConExito) {
					switch (extension) {
						case "m3u" ->
							salvadoConExito = salvarM3U(archivo);
						case "pls" ->
							salvadoConExito = salvarPLS(archivo);
						case "xspf" ->
							salvadoConExito = salvarXSPF(archivo);
						default ->
							salvadoConExito = false;
					}

					if (salvadoConExito) {
						JOptionPane.showMessageDialog(this, "La playlist se ha guardado correctamente");
					} else {
						JOptionPane.showMessageDialog(this, "Ha habido un error al guardar");
					}
				} else {
					JOptionPane.showMessageDialog(this, "La extension utilizada no es compatible");
				}
			}
		}

		setLookAndFeelNimbus();
   }//GEN-LAST:event_jMenuBarGuardarActionPerformed

   private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed

		int index = this.jListaCanciones.getSelectedRow();
		if (index != -1 && this.modeloCancion.getRowCount() > index) {
			if (this.jButtonPlay.getText().equals("II")) {
				this.jButtonPlay.setText("▶");
			} else {
				updateTime();
				this.jButtonPlay.setText("II");
				/*this.jMusicBar.setMinimum(0);
				this.jMusicBar.setMaximum(this.modeloCancion.getCancion(index).getDuracion());
				this.jMusicBar.setValue(0);
				boolean reproduciendo = true;
				while (this.jMusicBar.getValue() < this.jMusicBar.getMaximum() && reproduciendo) {
					this.jMusicBar.setValue(this.jMusicBar.getValue() + 1);
					try {
						Thread.sleep(1000);
					} catch (InterruptedException e) {
						reproduciendo = false;
					}
				}*/
			}
		}
   }//GEN-LAST:event_jButtonPlayActionPerformed

   private void jButtonPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPreviousActionPerformed
		int index = this.jListaCanciones.getSelectedRow() - 1;
		int longitud = this.modeloCancion.getRowCount() - 1;
		if (index == -1) {
			this.jListaCanciones.setRowSelectionInterval(longitud, longitud);
		} else {
			this.jListaCanciones.setRowSelectionInterval(index, index);
		}
		updateTableUI();
   }//GEN-LAST:event_jButtonPreviousActionPerformed

   private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
		int index = this.jListaCanciones.getSelectedRow() + 1;
		int longitud = this.modeloCancion.getRowCount() - 1;
		if (index > longitud) {
			this.jListaCanciones.setRowSelectionInterval(0, 0);
		} else {
			this.jListaCanciones.setRowSelectionInterval(index, index);
		}
		updateTableUI();
   }//GEN-LAST:event_jButtonNextActionPerformed

   private void jListaCancionesCaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jListaCancionesCaretPositionChanged

   }//GEN-LAST:event_jListaCancionesCaretPositionChanged

   private void jListaCancionesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jListaCancionesPropertyChange

   }//GEN-LAST:event_jListaCancionesPropertyChange

   private void jListaCancionesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListaCancionesMousePressed

   }//GEN-LAST:event_jListaCancionesMousePressed

   private void jListaCancionesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListaCancionesMouseClicked

   }//GEN-LAST:event_jListaCancionesMouseClicked

   private void jListaCancionesFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jListaCancionesFocusGained
   }//GEN-LAST:event_jListaCancionesFocusGained

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		setLookAndFeelNimbus();
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new Aplicacion().setVisible(true);
			}
		});
	}

	/**
	 * Establecer el aspecto por defecto de la interfaz gráfica.
	 */
	private static void setLookAndFeelNimbus() {
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Aplicacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
	}

	/**
	 * Refrescar la interfaz.
	 */
	private void updateTableUI() {
		this.jButtonPlay.setText("▶");
		this.jListaCanciones.updateUI();
		updateTime();
	}

	/**
	 * Refrescar el tiempo de reproducción.
	 */
	private void updateTime() {
		int index = this.jListaCanciones.getSelectedRow();
		if (index != -1 && this.modeloCancion.getRowCount() > index) {
			int duracion = this.modeloCancion.getCancion(index).getDuracion();
			if (duracion != -1) {
				int secs = duracion % 60;
				int mins = duracion / 60;
				String secsText;
				String minsText;
				if (secs < 10) {
					secsText = "0" + secs;
				} else {
					secsText = "" + secs;
				}
				if (mins < 10) {
					minsText = "0" + mins;
				} else {
					minsText = "" + mins;
				}
				this.jTimeEnd.setText(minsText + ":" + secsText);
			} else {
				this.jTimeEnd.setText("00:00");
			}
		} else {
			this.jTimeEnd.setText("00:00");
		}
		this.jButtonPlay.setText("▶");
	}

	/**
	 * Salvar la lista de reproducción almacenada en el ModeloCancion de la aplicacion con el formato M3U.
	 *
	 * @param archivo la ubicación en la que se va a salvar la playlist.
	 * @return true si se ha salvado con exito, o false si ha ocurrido algún error.
	 */
	private boolean salvarM3U(File archivo) {
		boolean IOexito = true;
		try {
			BufferedWriter buffer = new BufferedWriter(new FileWriter(archivo, false));
			PrintWriter salida = new PrintWriter(buffer);
			Cancion can;
			salida.println("#EXTM3U");
			for (int i = 0; i < modeloCancion.getNumeroCanciones(); i++) {
				can = modeloCancion.getCancion(i);
				salida.println("#EXTINF:" + can.getDuracion() + "," + can.getTitulo());
				salida.println(can.getRuta());
			}
			buffer.flush();
			buffer.close();
		} catch (IOException e) {
			IOexito = false;
		}
		return IOexito;
	}

	/**
	 * Salvar la lista de reproducción almacenada en el ModeloCancion de la aplicacion con el formato PLS.
	 *
	 * @param archivo la ubicación en la que se va a salvar la playlist.
	 * @return true si se ha salvado con exito, o false si ha ocurrido algún error.
	 */
	private boolean salvarPLS(File archivo) {
		boolean IOexito = true;
		try {
			BufferedWriter buffer = new BufferedWriter(new FileWriter(archivo, false));
			PrintWriter salida = new PrintWriter(buffer);
			Cancion can;
			salida.println("[playlist]");
			for (int i = 0; i < modeloCancion.getNumeroCanciones(); i++) {
				can = modeloCancion.getCancion(i);
				salida.println("File" + (i + 1) + "=" + can.getRuta());
				salida.println("Title" + (i + 1) + "=" + can.getTitulo());
				salida.println("Length" + (i + 1) + "=" + can.getDuracion());
			}
			salida.println("NumberOfEntries=" + modeloCancion.getNumeroCanciones());
			salida.println("Version=2");
			buffer.flush();
			buffer.close();
		} catch (IOException e) {
			IOexito = false;
		}
		return IOexito;
	}

	/**
	 * Salvar la lista de reproducción almacenada en el ModeloCancion de la aplicacion con el formato XSPF.
	 *
	 * @param archivo la ubicación en la que se va a salvar la playlist.
	 * @return true si se ha salvado con exito, o false si ha ocurrido algún error.
	 */
	private boolean salvarXSPF(File archivo) {
		DocumentBuilderFactory dbf;
		DocumentBuilder db;
		Document documento;
		boolean salvadoConExito = true;
		try {
			BufferedWriter buffer = new BufferedWriter(new FileWriter(archivo, false));
			PrintWriter salida = new PrintWriter(buffer);
			salida.print("<?xml version=\"1.0\" encoding=\"UTF-8\"?><playlist version=\"1\" xmlns=\"http://xspf.org/ns/0/\"><trackList></trackList></playlist>");
			salida.close();
			dbf = DocumentBuilderFactory.newInstance();
			db = dbf.newDocumentBuilder();
			documento = db.parse(archivo);
			Cancion can;

			for (int i = 0; i < modeloCancion.getNumeroCanciones(); i++) {
				can = modeloCancion.getCancion(i);
				Element trackTag = documento.createElement("track");
				Element locationTag = documento.createElement("location");
				Element titleTag = documento.createElement("title");
				Element lengthTag = documento.createElement("length");
				locationTag.appendChild(documento.createTextNode(can.getRuta()));
				titleTag.appendChild(documento.createTextNode(can.getTitulo()));
				lengthTag.appendChild(documento.createTextNode(can.getDuracion() + ""));
				trackTag.appendChild(locationTag);
				trackTag.appendChild(titleTag);
				trackTag.appendChild(lengthTag);
				documento.getDocumentElement().getElementsByTagName("trackList").item(0).appendChild(trackTag);
			}

			Transformer tr = TransformerFactory.newInstance().newTransformer();
			tr.setOutputProperty(OutputKeys.INDENT, "yes");
			tr.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			StreamResult result = new StreamResult(archivo);
			DOMSource source = new DOMSource(documento);
			tr.transform(source, result);

		} catch (Exception e) {
			salvadoConExito = false;
		}
		return salvadoConExito;
	}

	/**
	 * Cargar la playlist de un archivo M3U en el ModeloCancion de la aplicación.
	 *
	 * @param archivo la ubicación del archivo que se desea cargar.
	 * @return true si se ha cargado con exito, o false si ha ocurrido algún error.
	 */
	private boolean cargarM3U(File archivo) {
		boolean IOexito;
		try {
			BufferedReader buffer = new BufferedReader(new FileReader(archivo));
			Scanner entrada = new Scanner(buffer);
			int duracion;
			String titulo;
			String ruta;
			String linea = entrada.nextLine();
			IOexito = (linea.equals("#EXTM3U"));
			while (entrada.hasNextLine() && IOexito) {
				linea = entrada.nextLine();
				if (capturarPalabraEnLineaHasta(linea, ':').equals("#EXTINF")) {
					duracion = Integer.parseInt(capturarPalabraEnLineaDesdeHasta(linea, ':', ','));
					titulo = capturarPalabraEnLineaDesde(linea, ',');
					ruta = entrada.nextLine();
					this.modeloCancion.añadirCancion(new Cancion(titulo, ruta, duracion));
				} else {
					IOexito = false;
				}
			}
			entrada.close();
		} catch (Exception e) {
			IOexito = false;
		}
		return IOexito;
	}

	/**
	 * Cargar la playlist de un archivo PLS en el ModeloCancion de la aplicación.
	 *
	 * @param archivo la ubicación del archivo que se desea cargar.
	 * @return true si se ha cargado con exito, o false si ha ocurrido algún error.
	 */
	private boolean cargarPLS(File archivo) {
		boolean IOexito;
		try {
			BufferedReader buffer = new BufferedReader(new FileReader(archivo));
			Scanner entrada = new Scanner(buffer);
			int duracion = 0;
			String titulo = "";
			String ruta = "";
			String linea = entrada.nextLine();
			IOexito = (linea.equals("[playlist]"));
			linea = entrada.nextLine();
			while (!capturarPalabraEnLineaHasta(linea, '=').contains("NumberOfEntries") && entrada.hasNextLine() && IOexito) {
				if (capturarPalabraEnLineaHasta(linea, '=').contains("File")) {
					ruta = capturarPalabraEnLineaDesde(linea, '=');
				} else {
					IOexito = false;
				}
				linea = entrada.nextLine();
				if (capturarPalabraEnLineaHasta(linea, '=').contains("Title")) {
					titulo = capturarPalabraEnLineaDesde(linea, '=');
				} else {
					IOexito = false;
				}
				linea = entrada.nextLine();
				if (capturarPalabraEnLineaHasta(linea, '=').contains("Length")) {
					duracion = Integer.parseInt(capturarPalabraEnLineaDesde(linea, '='));
				} else {
					IOexito = false;
				}
				if (IOexito) {
					this.modeloCancion.añadirCancion(new Cancion(titulo, ruta, duracion));
				}
				linea = entrada.nextLine();
			}
			entrada.close();
		} catch (Exception e) {
			IOexito = false;
		}
		return IOexito;
	}

	/**
	 * Cargar la playlist de un archivo XSPF en el ModeloCancion de la aplicación.
	 *
	 * @param archivo la ubicación del archivo que se desea cargar.
	 * @return true si se ha cargado con exito, o false si ha ocurrido algún error.
	 */
	private boolean cargarXSPF(File archivo) {
		DocumentBuilderFactory dbf;
		DocumentBuilder db;
		Document documento;
		boolean cargadoConExito = true;

		try {
			dbf = DocumentBuilderFactory.newInstance();
			db = dbf.newDocumentBuilder();
			documento = db.parse(archivo);

			Node tracklist = documento.getElementsByTagName("trackList").item(0);
			String location = "";
			String title = "";
			int lenght = 0;
			Node track;
			for (int i = 0; i < tracklist.getChildNodes().getLength() && cargadoConExito; i++) {
				track = tracklist.getChildNodes().item(i);
				if (track.getNodeType() == Node.ELEMENT_NODE && track.getNodeName().equals("track")) {
					for (int e = 0; e < track.getChildNodes().getLength() && cargadoConExito; e++) {
						if (track.getChildNodes().item(e).getNodeType() == Node.ELEMENT_NODE) {
							switch (track.getChildNodes().item(e).getNodeName()) {
								case "location" ->
									location = track.getChildNodes().item(e).getTextContent();
								case "title" ->
									title = track.getChildNodes().item(e).getTextContent();
								case "length" ->
									lenght = Integer.parseInt(track.getChildNodes().item(e).getTextContent());
								default ->
									cargadoConExito = false;
							}
						}
					}
					modeloCancion.añadirCancion(new Cancion(title, location, lenght));
				}
			}

		} catch (Exception e) {
			cargadoConExito = false;
		}
		return cargadoConExito;
	}

	/**
	 * Capturar un fragmento de texto dentro de una linea de texto.
	 *
	 * @param linea linea en la que buscar.
	 * @param desde caracter desde el que empieza el fragmento.
	 * @param separador caracter en el que acaba el fragmento.
	 * @return el fragmento de texto.
	 */
	private String capturarPalabraEnLineaDesdeHasta(String linea, char desde, char separador) {
		boolean esSeparador = false;
		String palabra = "";
		int numDesde = 0;
		while (linea.charAt(numDesde) != desde) {
			numDesde++;
		}
		numDesde++;
		for (int i = numDesde; i < linea.length() && !esSeparador; i++) {
			if (linea.charAt(i) == separador) {
				esSeparador = true;
			} else {
				palabra = palabra + linea.charAt(i);
			}
		}
		return palabra;
	}

	/**
	 * Capturar un fragmento de texto dentro de una linea de texto.
	 *
	 * @param linea linea en la que buscar.
	 * @param separador caracter en el que acaba el fragmento desde el principio de la linea.
	 * @return el fragmento de texto.
	 */
	private String capturarPalabraEnLineaHasta(String linea, char separador) {
		boolean esSeparador = false;
		String palabra = "";
		for (int i = 0; i < linea.length() && !esSeparador; i++) {
			if (linea.charAt(i) == separador) {
				esSeparador = true;
			} else {
				palabra = palabra + linea.charAt(i);
			}
		}
		return palabra;
	}

	/**
	 * Capturar un fragmento de texto dentro de una linea de texto.
	 *
	 * @param linea linea en la que buscar.
	 * @param desde caracter desde el que empieza el fragmento hasta el final de la linea.
	 * @return el fragmento de texto.
	 */
	private String capturarPalabraEnLineaDesde(String linea, char desde) {
		String palabra = "";
		int numDesde = 0;
		while (linea.charAt(numDesde) != desde) {
			numDesde++;
		}
		numDesde++;
		for (int i = numDesde; i < linea.length(); i++) {
			palabra = palabra + linea.charAt(i);
		}
		return palabra;
	}

	private String getExtension(String nombre) {
		String extension = "";
		boolean esExtension = true;
		for (int i = nombre.length() - 1; i > 0 && esExtension; i--) {
			if (nombre.charAt(i) == '.') {
				esExtension = false;
			} else {
				extension = nombre.charAt(i) + extension;
			}
		}
		return extension;
	}


   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButtonAñadir;
   private javax.swing.JButton jButtonEditar;
   private javax.swing.JButton jButtonEliminar;
   private javax.swing.JButton jButtonNext;
   private javax.swing.JButton jButtonPlay;
   private javax.swing.JButton jButtonPrevious;
   private javax.swing.JTable jListaCanciones;
   private javax.swing.JMenu jMenu1;
   private javax.swing.JMenuBar jMenuBar;
   private javax.swing.JMenuItem jMenuBarCargar;
   private javax.swing.JMenuItem jMenuBarGuardar;
   private javax.swing.JMenuItem jMenuBarNueva;
   private javax.swing.JProgressBar jMusicBar;
   private javax.swing.JScrollPane jScrollPane1;
   private javax.swing.JPopupMenu.Separator jSeparator2;
   private javax.swing.JLabel jTextInfo;
   private javax.swing.JLabel jTextOpciones;
   private javax.swing.JLabel jTimeEnd;
   private javax.swing.JLabel jTimeStart;
   // End of variables declaration//GEN-END:variables
}
